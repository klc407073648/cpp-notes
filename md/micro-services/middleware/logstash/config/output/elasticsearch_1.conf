# 输入来自filebeat
input {
  beats {
    port => "5044"
  }
}

# 过滤器
filter {

        grok {
                match =>{
                        "message"=>"(?<data>({.*}))"
                }
        }

        grok {
                match =>{
                        "message"=>"%{TIMESTAMP_ISO8601:logTime}"
                }
        }

        grok {
                match =>{
                        "message"=>"%{LOGLEVEL:logLevel}"
                }
        }


        grok {
                match => {
                        "message"=>"(?<userId>(?<=\"userId\":)(\d+))"
                }
        }

        # 设置东八区时间
        ruby {
                code => "event.set('logstashTime', event.get('@timestamp').time.localtime + 8*60*60);
                        event.set('@timestamp', event.get('logstashTime'))"
        }
		
		# 忽略字段
        mutate {
                remove_field => "host"
                remove_field => "@version"
        }

}

# 输出追加到日志中
output {
  stdout { codec => rubydebug }
}

# 输出到es
output {
  elasticsearch {
  	# host
    hosts => ["http://elasticsearch:9200"]
    # 开启logstash自动管理模板功能,默认manage_template参数为true, 否则logstash将不会调用Elasticsearch API创建模板。  
    manage_template => true
    # 自定义索引 按照天拆分
    index => "my-log-%{+YYYY.MM.dd}"
    # 自定义类型
    document_type=> "_doc"
    # 映射模板文件所在位置
    template => "/usr/share/logstash/templates/my-log.json"
    #template_name => "my-log"
    # 是否覆盖已存在的模板，template_overwrite为true则template的order高的，满足同样条件（如均以searchlog-开头）的template将覆盖order低的
    template_overwrite => true
  }
}

